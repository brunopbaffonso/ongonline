<?php

require_once dirname(__FILE__) . '/../../../../../lib/Agana/Http/StatusCodes.php';

/**
 * Test class for Agana_Http_StatusCodes.
 * Generated by PHPUnit on 2012-03-01 at 18:29:06.
 */
class Agana_Http_StatusCodesTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Agana_Http_StatusCodes
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Agana_Http_StatusCodes;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    public function testHttpHeaderFor() {
        // 404 code is ok should return a Header
        $h = $this->object->httpHeaderFor(404);
        $this->assertNotEmpty($h);

        // the header should have HTTP/1.1 in it
        $this->assertContains('HTTP/1.1', $h);
    }

    /**
     * @expectedException Exception
     */
    public function testHttpHeaderForException() {
        // 1404 code is not ok should return a exception
        $h = $this->object->httpHeaderFor(1404);
        $this->assertNotEmpty($h);

        // the header should have HTTP/1.1 in it
        $this->assertContains('HTTP/1.1', $h);
    }

    /**
     * testGetMessageForCode() expect the message with and without the code.
     */
    public function testGetMessageForCode() {
        $h = $this->object->getMessageForCode(404);
        $this->assertNotEmpty($h, 'Should be not empty for this code');
        $this->assertNotContains('404', $h, 'Should not contains the code with message');

        $h = $this->object->getMessageForCode(404, TRUE);
        $this->assertNotEmpty($h, 'Should be not empty for this code');
        $this->assertStringStartsWith('404', $h, 'Should contains the code with message : ' . $h);
    }

    /**
     * @todo Implement testIsError().
     */
    public function testIsError() {
        $this->assertFalse($this->object->isError(300),
                'Should nor be an error');

        $this->assertTrue($this->object->isError(401),
                'Should BE an error');

        $this->assertTrue($this->object->isError(500),
                'Should BE an error');
    }

    /**
     * @todo Implement testCanHaveBody().
     */
    public function testCanHaveBody() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

